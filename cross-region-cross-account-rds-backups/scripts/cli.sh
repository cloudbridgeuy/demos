#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
set -e


normalize_rargs_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        rargs_input+=("-${flags:i:1}")
      done
    else
      rargs_input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  prefix="rargs_"
  args="$(set | grep ^$prefix | grep -v rargs_run || true)"
  if [[ -n "$args" ]]; then
    echo
    echo args:
    for var in $args; do
      echo "- $var" | sed 's/=/ = /g'
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

  if ((${#rargs_other_args[@]})); then
    echo
    echo rargs_other_args:
    echo "- \${rargs_other_args[*]} = ${rargs_other_args[*]}"
    for i in "${!rargs_other_args[@]}"; do
      echo "- \${rargs_other_args[$i]} = ${rargs_other_args[$i]}"
    done
  fi
}

ROOT_DIRECTORY="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
self="$ROOT_DIRECTORY/cli.sh"

version() {
  echo "0.1.0"
}
usage() {
  printf "Handle all the actions behind the cross-region-cross-account-rds-backups DEMO\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  cross-region-cross-account-rds-backups [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"
  printf "  cross-region-cross-account-rds-backups -h|--help\n"
  printf "  cross-region-cross-account-rds-backups -v|--version\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  cat <<EOF
  cold-start ....... Handle cold-start resources
  cross-account .... Handle cross-region resources
  cross-region ..... Handle cross-region resources
  down ............. Destroy all the DEMO resources
  events ........... Handle events and events resources
  snapshots ........ Handle snapshots
  up ............... Create all the DEMO resources
  update ........... Update the DEMO resources
EOF

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  -v --version\n"
  printf "    Print version\n"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v|--version)
        version
        exit
        ;;
      -h|--help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    cold-start)
      action="cold-start"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    cross-account)
      action="cross-account"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    cross-region)
      action="cross-region"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    down)
      action="down"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    events)
      action="events"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    snapshots)
      action="snapshots"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    up)
      action="up"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    update)
      action="update"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    -h|--help)
      usage
      exit
      ;;
    "")
      ;;
    *)
      printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid command: " "$action" >&2
      exit 1
      ;;
  esac
}
cold-start_usage() {
  printf "Handle cold-start resources\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  cold-start [OPTIONS]\n"
  printf "  cold-start -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_cold-start_arguments() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      *)
        break
        ;;
    esac
  done
}
# Handle cold-start resources
cold-start() {
  # Parse command arguments
  parse_cold-start_arguments "$@"

  local sub="/Users/guzmanmonne/Projects/CloudBridge/demos/cross-region-cross-account-rds-backups/scripts/./cold-start.sh"
	# shellcheck disable=SC2068
	# shellcheck disable=SC2154
	"$sub" ${rargs_input[@]}
}
cross-account_usage() {
  printf "Handle cross-region resources\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  cross-account [OPTIONS]\n"
  printf "  cross-account -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_cross-account_arguments() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      *)
        break
        ;;
    esac
  done
}
# Handle cross-region resources
cross-account() {
  # Parse command arguments
  parse_cross-account_arguments "$@"

  local sub="/Users/guzmanmonne/Projects/CloudBridge/demos/cross-region-cross-account-rds-backups/scripts/./cross-account.sh"
	# shellcheck disable=SC2068
	# shellcheck disable=SC2154
	"$sub" ${rargs_input[@]}
}
cross-region_usage() {
  printf "Handle cross-region resources\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  cross-region [OPTIONS]\n"
  printf "  cross-region -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_cross-region_arguments() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      *)
        break
        ;;
    esac
  done
}
# Handle cross-region resources
cross-region() {
  # Parse command arguments
  parse_cross-region_arguments "$@"

  local sub="/Users/guzmanmonne/Projects/CloudBridge/demos/cross-region-cross-account-rds-backups/scripts/./cross-region.sh"
	# shellcheck disable=SC2068
	# shellcheck disable=SC2154
	"$sub" ${rargs_input[@]}
}
down_usage() {
  printf "Destroy all the DEMO resources\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  down [OPTIONS]\n"
  printf "  down -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_down_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        down_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --)
        shift
        rargs_other_args+=("$@")
        break
        ;;
      -?*)
        rargs_other_args+=("$1")
        shift
        ;;
      *)
        rargs_other_args+=("$1")
        shift
        ;;
    esac
  done
}
# Destroy all the DEMO resources
down() {
  # Parse command arguments
  parse_down_arguments "$@"

  # Check dependencies
  dependency="parallel"
  if ! command -v $dependency >/dev/null 2>&1; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing dependency: " "$dependency" >&2
    printf "You need to install GNU Parallel to use this command.\n" >&2
    exit 1
  else
    deps["$dependency"]="$(command -v $dependency | head -n1)"
  fi

	set +e
	$self cross-account destroy
	$self cross-region destroy
	$self events destroy
	$self cold-start destroy
}
events_usage() {
  printf "Handle events and events resources\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  events [OPTIONS]\n"
  printf "  events -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_events_arguments() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      *)
        break
        ;;
    esac
  done
}
# Handle events and events resources
events() {
  # Parse command arguments
  parse_events_arguments "$@"

  local sub="/Users/guzmanmonne/Projects/CloudBridge/demos/cross-region-cross-account-rds-backups/scripts/./events.sh"
	# shellcheck disable=SC2068
	# shellcheck disable=SC2154
	"$sub" ${rargs_input[@]}
}
snapshots_usage() {
  printf "Handle snapshots\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  snapshots [OPTIONS]\n"
  printf "  snapshots -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_snapshots_arguments() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      *)
        break
        ;;
    esac
  done
}
# Handle snapshots
snapshots() {
  # Parse command arguments
  parse_snapshots_arguments "$@"

  local sub="/Users/guzmanmonne/Projects/CloudBridge/demos/cross-region-cross-account-rds-backups/scripts/./snapshots.sh"
	# shellcheck disable=SC2068
	# shellcheck disable=SC2154
	"$sub" ${rargs_input[@]}
}
up_usage() {
  printf "Create all the DEMO resources\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  up [OPTIONS]\n"
  printf "  up -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_up_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        up_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --)
        shift
        rargs_other_args+=("$@")
        break
        ;;
      -?*)
        rargs_other_args+=("$1")
        shift
        ;;
      *)
        rargs_other_args+=("$1")
        shift
        ;;
    esac
  done
}
# Create all the DEMO resources
up() {
  # Parse command arguments
  parse_up_arguments "$@"

  # Check dependencies
  dependency="parallel"
  if ! command -v $dependency >/dev/null 2>&1; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing dependency: " "$dependency" >&2
    printf "You need to install GNU Parallel to use this command.\n" >&2
    exit 1
  else
    deps["$dependency"]="$(command -v $dependency | head -n1)"
  fi

	set -x
	$self cold-start create
	$self events create
	primary_kms_key_arn="$($self events status | yq -r '.Outputs[] | select(.OutputKey == "PrincipalKmsKeyArn").OutputValue')"
	lambda_function_arn="$($self events status | yq -r '.Outputs[] | select(.OutputKey == "LambdaFunctionArn").OutputValue')"
	$self cross-region create --primary-kms-key-arn "$primary_kms_key_arn" --lambda-function-arn "$lambda_function_arn"
	$self cross-account create
}
update_usage() {
  printf "Update the DEMO resources\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  update [OPTIONS]\n"
  printf "  update -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_update_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        update_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --)
        shift
        rargs_other_args+=("$@")
        break
        ;;
      -?*)
        rargs_other_args+=("$1")
        shift
        ;;
      *)
        rargs_other_args+=("$1")
        shift
        ;;
    esac
  done
}
# Update the DEMO resources
update() {
  # Parse command arguments
  parse_update_arguments "$@"

  # Check dependencies
  dependency="parallel"
  if ! command -v $dependency >/dev/null 2>&1; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing dependency: " "$dependency" >&2
    printf "You need to install GNU Parallel to use this command.\n" >&2
    exit 1
  else
    deps["$dependency"]="$(command -v $dependency | head -n1)"
  fi

	set -x
	$self cold-start update
	$self events update
	primary_kms_key_arn="$($self cold-start status | yq -r '.Outputs[] | select(.OutputKey == "PrincipalKmsKeyArn").OutputValue')"
	lambda_function_arn="$($self events status | yq -r '.Outputs[] | select(.OutputKey == "LambdaFunctionArn").OutputValue')"
	$self cross-region update --primary-kms-key-arn "$primary_kms_key_arn" --lambda-function-arn "$lambda_function_arn"
}

rargs_run() {
  declare -A deps=()
  declare -a rargs_other_args=()
  declare -a rargs_input=()
  normalize_rargs_input "$@"
  parse_arguments "${rargs_input[@]}"
  # Check global dependencies
  
  for dependency in jq aws yq column; do
    if ! command -v $dependency >/dev/null 2>&1; then
      printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing dependency: " "$dependency" >&2
      exit 1
    else
      deps["$dependency"]="$(command -v $dependency | head -n1)"
    fi
  done

  # Call the right command action
  case "$action" in
    "cold-start")
      cold-start "${rargs_input[@]}"
      exit
      ;;
    "cross-account")
      cross-account "${rargs_input[@]}"
      exit
      ;;
    "cross-region")
      cross-region "${rargs_input[@]}"
      exit
      ;;
    "down")
      down "${rargs_input[@]}"
      exit
      ;;
    "events")
      events "${rargs_input[@]}"
      exit
      ;;
    "snapshots")
      snapshots "${rargs_input[@]}"
      exit
      ;;
    "up")
      up "${rargs_input[@]}"
      exit
      ;;
    "update")
      update "${rargs_input[@]}"
      exit
      ;;
    "")
      printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing command. Select one of " "cold-start, cross-account, cross-region, down, events, snapshots, up, update" >&2
      usage >&2
      exit 1
      ;;
    
  esac
}

rargs_run "$@"
